using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using NUnit.Framework;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using tests_generator;
using tests_generator.app;

namespace test_generator.tests
{
    public class Tests
    {
        private string _filePath = TryGetSolutionDir.TryGetSolutionDirectoryInfo().FullName + "\\FilesToTest\\";

        [SetUp]
        public void Setup()
        {


        }

        [Test]
        public void Class1UsingsClassesTest()
        {
            var sourceCode = File.ReadAllText(_filePath + "Class1.cs");
            TestsGenerator generator = new(sourceCode);
            var filesGenerated = generator.Generate();
            List<CompilationUnitSyntax> roots = new();
            foreach (var file in filesGenerated)
            {
                roots.Add(CSharpSyntaxTree.ParseText(file.SourceCode).GetCompilationUnitRoot());
            }

            var usings = roots[0].DescendantNodes().OfType<UsingDirectiveSyntax>();
            Assert.That(usings.Count(), Is.EqualTo(1));

            var classes = roots[0].DescendantNodes().OfType<ClassDeclarationSyntax>();
            Assert.That(classes.Count(), Is.EqualTo(1));
            foreach (ClassDeclarationSyntax @class in classes)
            {
                Assert.Multiple(() =>
                {
                    Assert.That(@class.Modifiers.Any(SyntaxKind.PublicKeyword), Is.True);
                    Assert.That(@class.Members.Where(a => a is MethodDeclarationSyntax).Count, Is.EqualTo(3));
                    Assert.That(@class.Identifier.ValueText, Contains.Substring("Test"));
                    Assert.That(@class.AttributeLists.ToString(), Is.EqualTo("[TestFixture]"));
                });
            }

        }

        [Test]
        public void Class1MethodsTest()
        {
            var sourceCode = File.ReadAllText(_filePath + "Class1.cs");
            TestsGenerator generator = new(sourceCode);
            var filesGenerated = generator.Generate();
            List<CompilationUnitSyntax> roots = new();
            foreach (var file in filesGenerated)
            {
                roots.Add(CSharpSyntaxTree.ParseText(file.SourceCode).GetCompilationUnitRoot());
            }

            var methods = roots[0].DescendantNodes().OfType<MethodDeclarationSyntax>();
            Assert.That(methods.Count(), Is.EqualTo(3));
            foreach (var method in methods)
            {
                Assert.Multiple(() =>
                {
                    Assert.That(method.Modifiers.Any(SyntaxKind.PublicKeyword), Is.True);
                    Assert.That(method.ReturnType.ToString(), Is.EqualTo("void"));
                    Assert.That(method.AttributeLists.ToString(), Is.EqualTo("[Test]"));
                    Assert.That(method.Identifier.ValueText, Contains.Substring("Test"));
                    Assert.That(method.Body.Statements.ToString(), Is.EqualTo("Assert.Fail(\"autogenerated\");"));
                });
            }


        }
        
        [Test]
        public void Class1NamespaceTest()
        {
            var sourceCode = File.ReadAllText(_filePath + "Class1.cs");
            TestsGenerator generator = new(sourceCode);
            var filesGenerated = generator.Generate();
            List<CompilationUnitSyntax> roots = new();
            foreach (var file in filesGenerated)
            {
                roots.Add(CSharpSyntaxTree.ParseText(file.SourceCode).GetCompilationUnitRoot());
            }
            var namespaces = roots[0].DescendantNodes().OfType<NamespaceDeclarationSyntax>();
            Assert.That(namespaces.Count(), Is.EqualTo(1));
            foreach (var @namespace in namespaces)
            {
                Assert.That(@namespace.Name.ToString, Contains.Substring(".Test"));
            }
                
        }
    }
}